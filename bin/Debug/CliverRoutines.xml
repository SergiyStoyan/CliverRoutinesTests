<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CliverRoutines</name>
    </assembly>
    <members>
        <member name="T:Cliver.Log">
            <summary>
            Multithreaded logging routines
            </summary>
            <summary>
            Multithreaded logging routines
            </summary>
        </member>
        <member name="F:Cliver.Log.ProcessName">
            <summary>
            Normalized name of this process
            </summary>
        </member>
        <member name="F:Cliver.Log.CompanyCommonDataDir">
            <summary>
            Directory where the CliverSoft's application data independent on user are located.
            </summary>
        </member>
        <member name="F:Cliver.Log.AppCommonDataDir">
            <summary>
            Directory where the application's data files independent on user are located.
            </summary>
        </member>
        <member name="F:Cliver.Log.CompanyUserDataDir">
            <summary>
            Directory where the CliverSoft's application data dependent on user are located.
            </summary>
        </member>
        <member name="F:Cliver.Log.AppUserDataDir">
            <summary>
            Directory where the application's data files dependent on user are located.
            </summary>
        </member>
        <member name="F:Cliver.Log.AppDir">
            <summary>
            Directory where the application binary is located.
            </summary>
        </member>
        <member name="P:Cliver.Log.WorkDir">
             <summary>
            Parent Log directory where logs are recorded
             </summary>
        </member>
        <member name="P:Cliver.Log.SessionDir">
            <summary>
            Directory of the current main session
            </summary>
        </member>
        <member name="F:Cliver.Log.OutputDirName">
            <summary>
            Output folder name
            </summary>
        </member>
        <member name="M:Cliver.Log.ClearSession">
            <summary>
            Used to clear all session parameters in order to start a new session
            </summary>
        </member>
        <member name="M:Cliver.Log.DeleteOldLogs(System.Int32,System.Boolean)">
            <summary>
            Deletes Log data from disk that is older than the specified threshold
            </summary>
        </member>
        <member name="M:Cliver.Log.Session.Close(System.String)">
            <summary>
            Close all writing streams and rename session and its directory. Using the session can be continued after that.
            </summary>
            <param name="new_name"></param>
        </member>
        <member name="M:Cliver.Log.Session.Close">
            <summary>
            Close all writing streams. The session can be used after.
            </summary>
        </member>
        <member name="F:Cliver.Log.Mode.SESSIONS">
            <summary>
            Each session creates its own folder.
            </summary>
        </member>
        <member name="F:Cliver.Log.Mode.ONLY_LOG">
            <summary>
            Writes only log file without creating session folder.
            </summary>
        </member>
        <member name="P:Cliver.Log.Main">
            <summary>
            Log belonging to the first (main) thread of the process.
            </summary>
        </member>
        <member name="P:Cliver.Log.This">
            <summary>
            Log beloning to the current thread.
            </summary>
        </member>
        <member name="P:Cliver.Log.Path">
            <summary>
            Log path
            </summary>
        </member>
        <member name="P:Cliver.Log.Id">
            <summary>
            Log id that is used for logging and browsing in GUI
            </summary>
        </member>
        <member name="M:Cliver.Log.Error(System.Exception)">
            <summary>
            Write the error to the current thread's log
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Cliver.Log.Error(System.String)">
            <summary>
            Write the error to the current thread's log
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Cliver.Log.Trace(System.Object)">
            <summary>
            Write the stack information about the caller to the current thread's log
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Cliver.Log.Exit(System.String)">
            <summary>
            Write the error to the current thread's log and terminate the process.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Cliver.Log.Exit(System.Exception)">
            <summary>
            Write the error to the current thread's log and terminate the process.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Cliver.Log.Warning(System.String)">
            <summary>
            Write the warning to the current thread's log.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Cliver.Log.Warning(System.Exception)">
            <summary>
            Write the exception as warning to the current thread's log.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Cliver.Log.Inform(System.String)">
            <summary>
            Write the notification to the current thread's log.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Cliver.Log.Write(Cliver.Log.MessageType,System.String,System.String)">
            <summary>
            Write the message to the current thread's log.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Cliver.Log.GetStackString(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Return stack information for the caller.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Cliver.Log.ThreadWriter.Main">
            <summary>
            Log belonging to the first (main) thread of the process.
            </summary>
        </member>
        <member name="P:Cliver.Log.ThreadWriter.This">
            <summary>
            Log beloning to the current thread.
            </summary>
        </member>
        <member name="F:Cliver.Log.ThreadWriter.Id">
            <summary>
            Log id that is used for logging and browsing in GUI
            </summary>
        </member>
        <member name="P:Cliver.Log.Writer.Path">
            <summary>
            Log path
            </summary>
        </member>
        <member name="M:Cliver.Log.Writer.Close">
            <summary>
            Close the log
            </summary>
        </member>
        <member name="M:Cliver.Log.Writer.Error(System.Exception)">
            <summary>
            Write the error to the current thread's log
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Cliver.Log.Writer.Error(System.String)">
            <summary>
            Write the error to the current thread's log
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Cliver.Log.Writer.Trace(System.Object)">
            <summary>
            Write the stack informtion for the caller to the current thread's log
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Cliver.Log.Writer.Exit(System.String)">
            <summary>
            Write the error to the current thread's log and terminate the process.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Cliver.Log.Writer.Exit(System.Exception)">
            <summary>
            Write the error to the current thread's log and terminate the process.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Cliver.Log.Writer.Warning(System.String)">
            <summary>
            Write the warning to the current thread's log.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Cliver.Log.Writer.Warning(System.Exception)">
            <summary>
            Write the exception as warning to the current thread's log.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Cliver.Log.Writer.Inform(System.String)">
            <summary>
            Write the notification to the current thread's log.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Cliver.Log.Writer.Write(Cliver.Log.MessageType,System.String,System.String)">
            <summary>
            Write the message to the current thread's log.
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:Cliver.Log.Message.DisableStumblingDialogs">
            <summary>
            Defines whether message boxes will be showed (run in manual mode) 
            </summary>
        </member>
        <member name="F:Cliver.Log.Message.Owner">
            <summary>
            Receives owner window handle. It is needed to do message box owned.
            </summary>
        </member>
        <member name="M:Cliver.ListDb.IndexedTable`1.Save(`0)">
            <summary>
            Table works as an ordered HashSet
            </summary>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="M:Cliver.ListDb.IndexedTable`1.Add(`0)">
            <summary>
            Table works as an ordered HashSet
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:Cliver.ListDb.IndexedTable`1.Insert(System.Int32,`0)">
            <summary>
            Table works as an ordered HashSet
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:Cliver.ListDb.Table`1.Save(`0)">
            <summary>
            Table works as an ordered HashSet
            </summary>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="M:Cliver.ListDb.Table`1.Add(`0)">
            <summary>
            Table works as an ordered HashSet
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:Cliver.ListDb.Table`1.Insert(System.Int32,`0)">
            <summary>
            Table works as an ordered HashSet
            </summary>
            <param name="document"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Cliver.Crypto.Halojoy.convert_by_halojoy(System.String)" -->
        <member name="P:Cliver.Db.DbConnection.Database">
            <summary>
            Current database
            </summary>
        </member>
        <member name="P:Cliver.Db.DbConnection.NativeConnection">
            <summary>
            Native connection that must be casted.
            </summary>
        </member>
        <member name="P:Cliver.Db.DbConnection.Item(System.String)">
            <summary>
            Creates and caches a command.
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:Cliver.Db.DbConnection.Get(System.String)">
            <summary>
            Creates a not cached command.
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="T:Cliver.InternetDateTime">
            <summary>
            Get current time from internet. Used to control test period.
            </summary>
        </member>
        <member name="M:Cliver.InternetDateTime.IsReleaseVersion(System.Reflection.Assembly)">
            <summary>
            Check if the assembly was compiled as release version
            </summary>
            <param name="assembly">assembly to check</param>
            <returns></returns>
        </member>
        <member name="M:Cliver.InternetDateTime.CHECK_TEST_PERIOD_VALIDITY(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Stop the code execution if the both conditions are met: 
            1)the entry assembly was compiled as a release version;  
            2)the test period expired.
            </summary>
            <param name="year">year when the test period expires; if it is less than 1 then the check is not performed</param>
            <param name="month">month when the test period expires</param>
            <param name="day">day when the test period expires</param>
            <param name="for_release_only"></param>
        </member>
        <member name="M:Cliver.InternetDateTime.GetOverHttps">
            <summary>
            Get the current datetime from a https response header.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cliver.InternetDateTime.GetOverHttp">
            <summary>
            Get the current datetime from a http response header.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Cliver.ThreadRoutines">
            <summary>
            Sleep not freezing the app
            </summary>
        </member>
        <member name="T:Cliver.DateTimeRoutines">
            <summary>
            Miscellaneous and parsing methods for DateTime
            </summary>
        </member>
        <member name="M:Cliver.DateTimeRoutines.GetSecondsSinceUnixEpoch(System.DateTime)">
            <summary>
            Amount of seconds elapsed between 1970-01-01 00:00:00 and the date-time.
            </summary>
            <param name="date_time">date-time</param>
            <returns>seconds</returns>
        </member>
        <member name="T:Cliver.DateTimeRoutines.ParsedDateTime">
            <summary>
            Defines a substring where date-time was found and result of conversion
            </summary>
        </member>
        <member name="F:Cliver.DateTimeRoutines.ParsedDateTime.IndexOfDate">
            <summary>
            Position of the date substring found
            </summary>
        </member>
        <member name="F:Cliver.DateTimeRoutines.ParsedDateTime.LengthOfDate">
            <summary>
            Length of the date substring found
            </summary>
        </member>
        <member name="F:Cliver.DateTimeRoutines.ParsedDateTime.IndexOfTime">
            <summary>
            Position of the time substring found
            </summary>
        </member>
        <member name="F:Cliver.DateTimeRoutines.ParsedDateTime.LengthOfTime">
            <summary>
            Length of the time substring found
            </summary>
        </member>
        <member name="F:Cliver.DateTimeRoutines.ParsedDateTime.DateTime">
            <summary>
            DateTime detected
            </summary>
        </member>
        <member name="F:Cliver.DateTimeRoutines.ParsedDateTime.IsDateFound">
            <summary>
            True if a date was found, False if it was constructed
            </summary>
        </member>
        <member name="F:Cliver.DateTimeRoutines.ParsedDateTime.IsTimeFound">
            <summary>
            True if a time was found, False if it was constructed
            </summary>
        </member>
        <member name="F:Cliver.DateTimeRoutines.ParsedDateTime.UtcOffset">
            <summary>
            UTC offset if it was found
            </summary>
        </member>
        <member name="F:Cliver.DateTimeRoutines.ParsedDateTime.IsUtcOffsetFound">
            <summary>
            True if UTC offset was found
            </summary>
        </member>
        <member name="F:Cliver.DateTimeRoutines.ParsedDateTime.UtcDateTime">
            <summary>
            Utc gotten from DateTime if IsUtcOffsetFound is True
            </summary>
        </member>
        <member name="P:Cliver.DateTimeRoutines.DefaultDate">
            <summary>
            Date that is accepted in the following cases:
            - no date was parsed by TryParseDateOrTime();
            - no year was found by TryParseDate();
            It is ignored if DefaultDateIsNow = true was set after DefaultDate 
            </summary>
        </member>
        <member name="F:Cliver.DateTimeRoutines.DefaultDateIsNow">
            <summary>
            If true then DefaultDate property is ignored and DefaultDate is always DateTime.Now
            </summary>
        </member>
        <member name="T:Cliver.DateTimeRoutines.DateTimeFormat">
            <summary>
            Defines default date-time format.
            </summary>
        </member>
        <member name="F:Cliver.DateTimeRoutines.DateTimeFormat.USA_DATE">
            <summary>
            month number goes before day number
            </summary>
        </member>
        <member name="F:Cliver.DateTimeRoutines.DateTimeFormat.UK_DATE">
            <summary>
            day number goes before month number
            </summary>
        </member>
        <member name="M:Cliver.DateTimeRoutines.TryParseDateTime(System.String,Cliver.DateTimeRoutines.DateTimeFormat,System.DateTime@)">
            <summary>
            Tries to find date and time within the passed string and return it as DateTime structure. 
            </summary>
            <param name="str">string that contains date and/or time</param>
            <param name="default_format">format to be used preferably in ambivalent instances</param>
            <param name="date_time">parsed date-time output</param>
            <returns>true if both date and time were found, else false</returns>
        </member>
        <member name="M:Cliver.DateTimeRoutines.TryParseDateOrTime(System.String,Cliver.DateTimeRoutines.DateTimeFormat,System.DateTime@)">
            <summary>
            Tries to find date and/or time within the passed string and return it as DateTime structure. 
            If only date was found, time in the returned DateTime is always 0:0:0.
            If only time was found, date in the returned DateTime is DefaultDate.
            </summary>
            <param name="str">string that contains date and(or) time</param>
            <param name="default_format">format to be used preferably in ambivalent instances</param>
            <param name="date_time">parsed date-time output</param>
            <returns>true if date and/or time was found, else false</returns>
        </member>
        <member name="M:Cliver.DateTimeRoutines.TryParseTime(System.String,Cliver.DateTimeRoutines.DateTimeFormat,System.DateTime@)">
            <summary>
            Tries to find time within the passed string and return it as DateTime structure. 
            It recognizes only time while ignoring date, so date in the returned DateTime is always 1/1/1.
            </summary>
            <param name="str">string that contains time</param>
            <param name="default_format">format to be used preferably in ambivalent instances</param>
            <param name="time">parsed time output</param>
            <returns>true if time was found, else false</returns>
        </member>
        <member name="M:Cliver.DateTimeRoutines.TryParseDate(System.String,Cliver.DateTimeRoutines.DateTimeFormat,System.DateTime@)">
            <summary>
            Tries to find date within the passed string and return it as DateTime structure. 
            It recognizes only date while ignoring time, so time in the returned DateTime is always 0:0:0.
            If year of the date was not found then it accepts the current year. 
            </summary>
            <param name="str">string that contains date</param>
            <param name="default_format">format to be used preferably in ambivalent instances</param>
            <param name="date">parsed date output</param>
            <returns>true if date was found, else false</returns>
        </member>
        <member name="M:Cliver.DateTimeRoutines.TryParseDateTime(System.String,Cliver.DateTimeRoutines.DateTimeFormat,Cliver.DateTimeRoutines.ParsedDateTime@)">
            <summary>
            Tries to find date and time within the passed string and return it as ParsedDateTime object. 
            </summary>
            <param name="str">string that contains date-time</param>
            <param name="default_format">format to be used preferably in ambivalent instances</param>
            <param name="parsed_date_time">parsed date-time output</param>
            <returns>true if both date and time were found, else false</returns>
        </member>
        <member name="M:Cliver.DateTimeRoutines.TryParseTime(System.String,Cliver.DateTimeRoutines.DateTimeFormat,Cliver.DateTimeRoutines.ParsedDateTime@)">
            <summary>
            Tries to find time within the passed string and return it as ParsedDateTime object. 
            It recognizes only time while ignoring date, so date in the returned ParsedDateTime is always 1/1/1
            </summary>
            <param name="str">string that contains date-time</param>
            <param name="default_format">format to be used preferably in ambivalent instances</param>
            <param name="parsed_time">parsed date-time output</param>
            <returns>true if time was found, else false</returns>
        </member>
        <member name="M:Cliver.DateTimeRoutines.TryParseDateOrTime(System.String,Cliver.DateTimeRoutines.DateTimeFormat,Cliver.DateTimeRoutines.ParsedDateTime@)">
            <summary>
            Tries to find date and/or time within the passed string and return it as ParsedDateTime object. 
            If only date was found, time in the returned ParsedDateTime is always 0:0:0.
            If only time was found, date in the returned ParsedDateTime is DefaultDate.
            </summary>
            <param name="str">string that contains date-time</param>
            <param name="default_format">format to be used preferably in ambivalent instances</param>
            <param name="parsed_date_time">parsed date-time output</param>
            <returns>true if date or time was found, else false</returns>
        </member>
        <member name="M:Cliver.DateTimeRoutines.TryParseTime(System.String,Cliver.DateTimeRoutines.DateTimeFormat,Cliver.DateTimeRoutines.ParsedDateTime@,Cliver.DateTimeRoutines.ParsedDateTime)">
            <summary>
            Tries to find time within the passed string (relatively to the passed parsed_date if any) and return it as ParsedDateTime object.
            It recognizes only time while ignoring date, so date in the returned ParsedDateTime is always 1/1/1
            </summary>
            <param name="str">string that contains date</param>
            <param name="default_format">format to be used preferably in ambivalent instances</param>
            <param name="parsed_time">parsed date-time output</param>
            <param name="parsed_date">ParsedDateTime object if the date was found within this string, else NULL</param>
            <returns>true if time was found, else false</returns>
        </member>
        <member name="M:Cliver.DateTimeRoutines.TryParseDate(System.String,Cliver.DateTimeRoutines.DateTimeFormat,Cliver.DateTimeRoutines.ParsedDateTime@)">
            <summary>
            Tries to find date within the passed string and return it as ParsedDateTime object. 
            It recognizes only date while ignoring time, so time in the returned ParsedDateTime is always 0:0:0.
            If year of the date was not found then it accepts the current year. 
            </summary>
            <param name="str">string that contains date</param>
            <param name="default_format">format to be used preferably in ambivalent instances</param>
            <param name="parsed_date">parsed date output</param>
            <returns>true if date was found, else false</returns>
        </member>
        <member name="T:Cliver.PathRoutines">
            <summary>
            Miscellaneous useful methods for file path/name construction
            </summary>
        </member>
        <member name="M:Cliver.PathRoutines.GetNormalizedFileName(System.String)">
            <summary>
            Clear file name from entities
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Cliver.PathRoutines.GetFileNameFromPath(System.String)">
            <summary>
            Works for any length path unlike Path.GetFileName()
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Cliver.PathRoutines.GetFileExtensionFromPath(System.String)">
            <summary>
            Works for any length path unlike Path.GetFileName()
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Cliver.PathRoutines.GetDirFromPath(System.String)">
            <summary>
            Works for any length path unlike Path.GetDir()
            </summary>
            <param name="path"></param>
            <returns></returns>        
        </member>
        <member name="T:Cliver.Settings">
            <summary>
            Alternative to .NET settings. Inheritors of this class are automatically managed by Config.
            </summary>
        </member>
        <member name="T:Cliver.Settings.Obligatory">
            <summary>
            this object is ever to be loaded
            </summary>
        </member>
        <member name="T:Cliver.Config">
            <summary>
            Manages Serializable settings.
            </summary>
        </member>
        <member name="M:Cliver.Config.Initialize(System.String,System.String)">
            <summary>
            It allows to load only certain settings objects, while ignoring unneeded ones.
            However, objects attributed with [Settings.Obligatory] will be loaded in any way.
            </summary>
            <param name="assemblyNameRegexPattern"></param>
            <param name="obligatoryObjectNamesRegexPattern"></param>
        </member>
        <member name="M:Cliver.Config.ReloadField(System.String)">
            <summary>
            Can be called from code when ordered load is required due to dependencies.
            </summary>
        </member>
        <member name="M:Cliver.Serialization.Binary.Serialize(System.Object)">
            <summary>
            Serialize object
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Cliver.Serialization.Xml.Serialize2``1(``0)">
            <summary>
            Serialize object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Cliver.Serialization.Xml.Deserialize2``1(System.String)">
            <summary>
            Deserialize object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xml"></param>
            <returns></returns>
        </member>
        <member name="M:Cliver.Serialization.Xml.Serialize``1(``0)">
            <summary>
            Serialize object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Cliver.Serialization.Xml.Deserialize``1(System.String)">
            <summary>
            Deserialize object
            </summary>
            <typeparam name="T"></typeparam>
            <param name="xml"></param>
            <returns></returns>
        </member>
    </members>
</doc>
